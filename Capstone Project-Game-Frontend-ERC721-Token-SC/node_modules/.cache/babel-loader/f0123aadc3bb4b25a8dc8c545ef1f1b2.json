{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Earl/Desktop/advancing-into-avalanche/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Earl/Desktop/advancing-into-avalanche/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from \"axios\";\nimport FormData from \"form-data\";\nvar API_KEY = \"3932a0244c64c94c6a17\";\nvar API_SECRET = \"87aa56b6ced055669e70ea9479102d01a4702be23b34ff35f88845185164ee38\";\nexport default function uploadImage(_x, _x2) {\n  return _uploadImage.apply(this, arguments);\n}\nfunction _uploadImage() {\n  _uploadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fileLocation, fileName) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(fileLocation, {\n              responseType: \"blob\"\n            });\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return uploadToPinata(response.data, fileName);\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _uploadImage.apply(this, arguments);\n}\nfunction uploadToPinata(_x3, _x4) {\n  return _uploadToPinata.apply(this, arguments);\n}\nfunction _uploadToPinata() {\n  _uploadToPinata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(image, name) {\n    var formData, url, response;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // put file into form data\n            formData = new FormData();\n            formData.append(\"file\", image, name);\n\n            // the endpoint needed to upload the file\n            url = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n            _context2.next = 5;\n            return axios.post(url, formData, {\n              maxContentLength: \"Infinity\",\n              headers: {\n                \"Content-Type\": \"multipart/form-data;boundary=\".concat(formData._boundary),\n                pinata_api_key: API_KEY,\n                pinata_secret_api_key: API_SECRET\n              }\n            });\n          case 5:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              imageHash: response.data.IpfsHash\n            });\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _uploadToPinata.apply(this, arguments);\n}","map":{"version":3,"names":["axios","FormData","API_KEY","API_SECRET","uploadImage","fileLocation","fileName","get","responseType","response","uploadToPinata","data","image","name","formData","append","url","post","maxContentLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","imageHash","IpfsHash"],"sources":["C:/Users/Earl/Desktop/advancing-into-avalanche/src/util/PinataConnection.js"],"sourcesContent":["import axios from \"axios\";\r\nimport FormData from \"form-data\";\r\n\r\nconst API_KEY = \"3932a0244c64c94c6a17\";\r\nconst API_SECRET = \"87aa56b6ced055669e70ea9479102d01a4702be23b34ff35f88845185164ee38\";\r\n\r\nexport default async function uploadImage(fileLocation, fileName) {\r\n  const response = await axios.get(fileLocation, {\r\n    responseType: \"blob\",\r\n  });\r\n  return await uploadToPinata(response.data, fileName);\r\n}\r\n\r\nasync function uploadToPinata(image, name) {\r\n  // put file into form data\r\n  const formData = new FormData();\r\n  formData.append(\"file\", image, name);\r\n\r\n  // the endpoint needed to upload the file\r\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n  const response = await axios.post(url, formData, {\r\n    maxContentLength: \"Infinity\",\r\n    headers: {\r\n      \"Content-Type\": `multipart/form-data;boundary=${formData._boundary}`,\r\n      pinata_api_key: API_KEY,\r\n      pinata_secret_api_key: API_SECRET,\r\n    },\r\n  });\r\n  return { imageHash: response.data.IpfsHash };\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAEhC,IAAMC,OAAO,GAAG,sBAAsB;AACtC,IAAMC,UAAU,GAAG,kEAAkE;AAErF,wBAA8BC,WAAW;EAAA;AAAA;AAKxC;EAAA,0EALc,iBAA2BC,YAAY,EAAEC,QAAQ;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACvCN,KAAK,CAACO,GAAG,CAACF,YAAY,EAAE;cAC7CG,YAAY,EAAE;YAChB,CAAC,CAAC;UAAA;YAFIC,QAAQ;YAAA;YAAA,OAGDC,cAAc,CAACD,QAAQ,CAACE,IAAI,EAAEL,QAAQ,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACrD;EAAA;AAAA;AAAA,SAEcI,cAAc;EAAA;AAAA;AAAA;EAAA,6EAA7B,kBAA8BE,KAAK,EAAEC,IAAI;IAAA;IAAA;MAAA;QAAA;UAAA;YACvC;YACMC,QAAQ,GAAG,IAAIb,QAAQ,EAAE;YAC/Ba,QAAQ,CAACC,MAAM,CAAC,MAAM,EAAEH,KAAK,EAAEC,IAAI,CAAC;;YAEpC;YACMG,GAAG;YAAA;YAAA,OACchB,KAAK,CAACiB,IAAI,CAACD,GAAG,EAAEF,QAAQ,EAAE;cAC/CI,gBAAgB,EAAE,UAAU;cAC5BC,OAAO,EAAE;gBACP,cAAc,yCAAkCL,QAAQ,CAACM,SAAS,CAAE;gBACpEC,cAAc,EAAEnB,OAAO;gBACvBoB,qBAAqB,EAAEnB;cACzB;YACF,CAAC,CAAC;UAAA;YAPIM,QAAQ;YAAA,kCAQP;cAAEc,SAAS,EAAEd,QAAQ,CAACE,IAAI,CAACa;YAAS,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC7C;EAAA;AAAA"},"metadata":{},"sourceType":"module"}
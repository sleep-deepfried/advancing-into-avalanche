{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Earl/Desktop/New folder (4)/advancing-into-avalanche/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Earl/Desktop/New folder (4)/advancing-into-avalanche/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ethers } from \"ethers\";\nimport abi from \"../abi.json\";\nexport function connectToWallet() {\n  return _connectToWallet.apply(this, arguments);\n}\nfunction _connectToWallet() {\n  _connectToWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var provider;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            _context.next = 3;\n            return provider.send(\"eth_requestAccounts\", []);\n          case 3:\n            return _context.abrupt(\"return\", provider.getSigner());\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectToWallet.apply(this, arguments);\n}\nexport function getContract(_x) {\n  return _getContract.apply(this, arguments);\n}\nfunction _getContract() {\n  _getContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(signer) {\n    var contractAddress;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            contractAddress = \"0x4013f19d2f672523971ED8D16CAe08513530663f\";\n            return _context2.abrupt(\"return\", new ethers.Contract(contractAddress, abi, signer));\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getContract.apply(this, arguments);\n}\nexport function mintNFT(_x2, _x3) {\n  return _mintNFT.apply(this, arguments);\n}\nfunction _mintNFT() {\n  _mintNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(stringURI, contract) {\n    var tx;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return contract.mint(stringURI);\n          case 2:\n            tx = _context3.sent;\n            console.log(\"transaction:>> \", tx);\n            _context3.next = 6;\n            return tx.wait();\n          case 6:\n            return _context3.abrupt(\"return\", tx);\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _mintNFT.apply(this, arguments);\n}\nexport function configureTokenURI(imageURL, name, description) {\n  return JSON.stringify({\n    name: name,\n    description: description,\n    image: imageURL,\n    attributes: []\n  });\n}","map":{"version":3,"names":["ethers","abi","connectToWallet","provider","providers","Web3Provider","window","ethereum","send","getSigner","getContract","signer","contractAddress","Contract","mintNFT","stringURI","contract","mint","tx","console","log","wait","configureTokenURI","imageURL","name","description","JSON","stringify","image","attributes"],"sources":["C:/Users/Earl/Desktop/New folder (4)/advancing-into-avalanche/src/util/EtherJSFunctions.js"],"sourcesContent":["import { ethers } from \"ethers\";\r\nimport abi from \"../abi.json\";\r\n\r\nexport async function connectToWallet() {\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum); \r\n  await provider.send(\"eth_requestAccounts\", []); \r\n  return provider.getSigner();\r\n}\r\n\r\nexport async function getContract(signer) {\r\n  const contractAddress = \"0x4013f19d2f672523971ED8D16CAe08513530663f\"; \r\n  return new ethers.Contract(contractAddress, abi, signer);\r\n}\r\n\r\nexport async function mintNFT(stringURI, contract) {\r\n  const tx = await contract.mint(stringURI); \r\n  console.log(\"transaction:>> \", tx); \r\n  await tx.wait(); \r\n  return tx;\r\n}\r\n\r\nexport function configureTokenURI(imageURL, name, description) {\r\n  return JSON.stringify({\r\n    name,\r\n    description,\r\n    image: imageURL,\r\n    attributes: [],\r\n  });\r\n}\r\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,GAAG,MAAM,aAAa;AAE7B,gBAAsBC,eAAe;EAAA;AAAA;AAIpC;EAAA,8EAJM;IAAA;IAAA;MAAA;QAAA;UAAA;YACCC,QAAQ,GAAG,IAAIH,MAAM,CAACI,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;YAAA;YAAA,OAC7DJ,QAAQ,CAACK,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;UAAA;YAAA,iCACvCL,QAAQ,CAACM,SAAS,EAAE;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC5B;EAAA;AAAA;AAED,gBAAsBC,WAAW;EAAA;AAAA;AAGhC;EAAA,0EAHM,kBAA2BC,MAAM;IAAA;IAAA;MAAA;QAAA;UAAA;YAChCC,eAAe,GAAG,4CAA4C;YAAA,kCAC7D,IAAIZ,MAAM,CAACa,QAAQ,CAACD,eAAe,EAAEX,GAAG,EAAEU,MAAM,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACzD;EAAA;AAAA;AAED,gBAAsBG,OAAO;EAAA;AAAA;AAK5B;EAAA,sEALM,kBAAuBC,SAAS,EAAEC,QAAQ;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAC9BA,QAAQ,CAACC,IAAI,CAACF,SAAS,CAAC;UAAA;YAAnCG,EAAE;YACRC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,EAAE,CAAC;YAAC;YAAA,OAC7BA,EAAE,CAACG,IAAI,EAAE;UAAA;YAAA,kCACRH,EAAE;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACV;EAAA;AAAA;AAED,OAAO,SAASI,iBAAiB,CAACC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,EAAE;EAC7D,OAAOC,IAAI,CAACC,SAAS,CAAC;IACpBH,IAAI,EAAJA,IAAI;IACJC,WAAW,EAAXA,WAAW;IACXG,KAAK,EAAEL,QAAQ;IACfM,UAAU,EAAE;EACd,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}